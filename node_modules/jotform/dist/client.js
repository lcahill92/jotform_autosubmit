"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importStar(require("axios"));
const clientOptions_1 = require("./constants/clientOptions");
const utils_1 = require("./utils");
class Client {
    constructor(apiKey, opt) {
        this.apiKey = apiKey;
        this.options = Object.assign(Object.assign({}, clientOptions_1.DefaultOptions), opt);
        if (!apiKey) {
            throw new Error('"apiKey" is a required parameter to use Jotform Client.');
        }
        const instance = axios_1.default.create({
            baseURL: this.options.baseURL,
            params: {
                apiKey
            }
        });
        instance.interceptors.response.use(resp => {
            if (resp.data.responseCode) {
                const code = resp.data.responseCode;
                if (!(0, utils_1.startsWith2)(code)) {
                    throw new axios_1.AxiosError(resp.data.message || 'Error occurred!', code);
                }
            }
            return resp.data;
        });
        this.inner = instance;
    }
    get(url, config) {
        return this.inner.get(url, config);
    }
    post(url, body, config) {
        return this.inner.post(url, body, config);
    }
    postForm(url, body, config) {
        return this.inner.post(url, body, Object.assign(Object.assign({}, config), { headers: Object.assign(Object.assign({}, config === null || config === void 0 ? void 0 : config.headers), { 'Content-Type': 'application/x-www-form-urlencoded' }) }));
    }
    put(url, body, config) {
        return this.inner.put(url, body, config);
    }
    delete(url, config) {
        return this.inner.delete(url, config);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map